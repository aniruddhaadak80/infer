"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4728],{3815:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=t(4848),o=t(8453);const i={id:"about-Infer",title:"About Infer"},r=void 0,s={id:"about-Infer",title:"About Infer",description:"Infer is a static program analyzer for Java, C, and Objective-C, written in",source:"@site/versioned_docs/version-1.1.0/02-about-infer.md",sourceDirName:".",slug:"/about-Infer",permalink:"/docs/1.1.0/about-Infer",draft:!1,unlisted:!1,tags:[],version:"1.1.0",sidebarPosition:2,frontMatter:{id:"about-Infer",title:"About Infer"},sidebar:"docs",previous:{title:"Uninitialized Value",permalink:"/docs/1.1.0/checker-uninit"},next:{title:"Separation logic and bi-abduction",permalink:"/docs/1.1.0/separation-logic-and-bi-abduction"}},c={},d=[];function l(e){const n={a:"a",p:"p",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Infer is a static program analyzer for Java, C, and Objective-C, written in\n",(0,a.jsx)(n.a,{href:"https://ocaml.org/",children:"OCaml"}),". Infer is deployed within Facebook and it is running\ncontinuously to verify select properties of every code modification for the main\nFacebook apps for Android and iOS, Facebook Messenger, Instagram, and other\napps. It can be used for other code too: Infer can also analyze C code, and Java\ncode that is not Android. At present Infer is tracking problems caused by null\npointer dereferences and resource and memory leaks, which cause some of the more\nimportant problems on mobile."]}),"\n",(0,a.jsx)(n.p,{children:"Infer came to Facebook with the acquisition of the verification startup\nMonoidics in 2013. Monoidics was itself based on recent academic research,\nparticularly on separation logic and bi-abduction."}),"\n",(0,a.jsx)(n.p,{children:"We have broadened Infer's scope within the past few years. We now refer to the\noriginal separation logic analysis as Infer.SL. We now also have Infer.AI, a\ngeneral analysis framework which is an interface to the modular analysis engine\nwhich can be used by other kinds of program analyses (technically, called\n''abstract interpretations'', hence the AI monicker). This added generality has\nbeen used to develop instantiations of Infer.AI for security, concurrency and in\nother domains. Additionally, we have Infer linters for describing shallow\nsyntactic analyses, using the AL language, because sometimes linters are just\nwhat you need."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(6540);const o={},i=a.createContext(o);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);